//original was but not any more Generated by CoffeeScript 1.4.0
(function () {

  d3.json("pimco_data.json", function (data) {
    var cells, colorScale, colors, corXscale, corYscale, corZscale, corr, corrplot, drawScatter, h, i, innerPad, j, nGroup, nind, nvar, pad, scatterplot, svg, totalh, totalw, w;
    h = 450;
    w = h;
    pad = {
      left: 70,
      top: 40,
      right: 5,
      bottom: 70
    };
    innerPad = 5;
    totalh = h + pad.top + pad.bottom;
    totalw = (w + pad.left + pad.right) * 2;
    svg = d3.select("div#plot").append("svg").attr("height", totalh).attr("width", totalw);
    corrplot = svg.append("g").attr("id", "corrplot").attr("transform", "translate(" + pad.left + "," + pad.top + ")");
    scatterplot = svg.append("g").attr("id", "scatterplot").attr("transform", "translate(" + (pad.left * 2 + pad.right + w) + "," + pad.top + ")");
    nind = data.ind.length;
    nvar = data["var"].length;
    corXscale = d3.scale.ordinal().domain(d3.range(nvar)).rangeBands([0, w]);
    corYscale = d3.scale.ordinal().domain(d3.range(nvar)).rangeBands([h, 0]);
    corZscale = d3.scale.linear().domain([-1, 0, 1]).range(["darkslateblue", "white", "crimson"]);

    //set up our brush using example set
    //http://bl.ocks.org/mbostock/4063663
    var brush = d3.svg.brush()
      .x(corXscale)
      .y(corYscale)
      .on("brushstart", brushstart)
      .on("brush", brushmove)
      .on("brushend", brushend);


    corr = [];
    for (i in data.corr) {
      for (j in data.corr[i]) {
        corr.push({
          row: i,
          col: j,
          value: data.corr[i][j]
        });
      }
    }
    scatterplot.append("rect").attr("height", h).attr("width", w).attr("fill", d3.rgb(200, 200, 200)).attr("stroke", "black").attr("stroke-width", 1).attr("pointer-events", "none");
    cells = corrplot.selectAll("empty").data(corr).enter().append("rect").attr("class", "cell").attr("x", function (d) {
      return corXscale(d.col);
    }).attr("y", function (d) {
      return corYscale(d.row);
    }).attr("width", corXscale.rangeBand()).attr("height", corYscale.rangeBand()).attr("fill", function (d) {
      return corZscale(d.value);
    }).attr("stroke", "none").attr("stroke-width", 2)
    .on("mouseover", function (d) {

    })
    .on("mouseout", function () {

    })
    .on("click", function (d) {

    });
    nGroup = d3.max(data.group);
    if (nGroup === 1) {
      colors = [d3.rgb(150, 150, 150)];
    } else if (nGroup <= 3) {
      colors = ["crimson", "green", "darkslateblue"];
    } else {
      if (nGroup <= 10) {
        colorScale = d3.scale.category10();
      } else {
        colorScale = d3.scale.category20();
      }
      colors = (function () {
        var _results;
        _results = [];
        for (i in d3.range(nGroup)) {
          _results.push(colorScale(i));
        }
        return _results;
      })();
    }


    corrplot.call(brush);



    //corrplot.append("rect").attr("height", h).attr("width", w).attr("fill", "none").attr("stroke", "black").attr("stroke-width", 1).attr("pointer-events", "none");
    //scatterplot.append("rect").attr("height", h).attr("width", w).attr("fill", "none").attr("stroke", "black").attr("stroke-width", 1).attr("pointer-events", "none");
    corrplot.append("text").text("Correlation matrix").attr("id", "corrtitle").attr("x", w / 2).attr("y", -pad.top / 2).attr("dominant-baseline", "middle").attr("text-anchor", "middle");
    scatterplot.append("text").text("Scatterplot").attr("id", "corrtitle").attr("x", w / 2).attr("y", -pad.top / 2).attr("dominant-baseline", "middle").attr("text-anchor", "middle");
    return d3.select("div#legend").style("opacity", 1);

    // Clear the previously-active brush, if any.
    function brushstart(p) {

    }

    // Highlight the selected circles.
    function brushmove(p) {
      var e = brush.extent();
      svg.selectAll(".cell").classed("hiddencell", function (d) {
        var cell = d3.select(this);
        return e[0][0] - cell.attr("width") > cell.attr("x") || cell.attr("x") > e[1][0]
        || e[0][1] - cell.attr("height") > cell.attr("y") || cell.attr("y") > e[1][1];
      });
    }

    // If the brush is empty, select all circles.
    function brushend() {
      if (brush.empty()) {
        svg.selectAll(".hiddencell").classed("hiddencell", false);
        svg.selectAll(".scatterCells").remove();
      } else {
        drawSplom();
      }
    }


    function drawSplom() {
      var scatterplot = d3.select("#scatterplot");
      var pairs = d3.selectAll(".cell:not(.hiddencell)");
      var rows = d3.set(pairs.data().map(function (d) { return d.row })).values();
      var cols = d3.set(pairs.data().map(function (d) { return d.col })).values();
      var cellsize = scatterplot.select("rect").attr("height") / Math.ceil(Math.sqrt(pairs[0].length));

      var scatterData = [];
      pairs.data().sort(function compareNumbers(a, b) {return +b.row - a.row;}).forEach(function (d) {
        var values = data.dat[d.row].map(function (dd, ii) {
          return { x: dd, y: data.dat[d.col][ii] };
        });
        scatterData.push({
          row: d.row,
          col: d.col,
          values: values
        });
      });

      var scatterCells = scatterplot.selectAll(".scatterCells").data(scatterData);

      scatterCells.enter().append("g")
        .attr("class", "scatterCells")

      scatterCells
        .attr("transform", function (d, i) {
          return "translate(" +
              cellsize * (i % Math.ceil(Math.sqrt(pairs[0].length))) +
              "," +
              cellsize * Math.floor(i / Math.ceil(Math.sqrt(pairs[0].length))) +
            ")"
        })
        .each(plot)
        .append("title")

        scatterCells.on("mouseover",function(d){
          d3.select("#corrplot").selectAll(".cell").filter(function(dd){
            return dd.row == d.row && dd.col == d.col;
          }).attr("stroke","black");
        });

        scatterCells.on("mouseout", function(d){
          d3.select("#corrplot").selectAll(".cell").filter(function(dd){
            return dd.row == d.row && dd.col == d.col;
          }).attr("stroke","none");
        });

        scatterCells.select("title").text(function(d){
          return data.var[d.col] + "~" +data.var[d.row]
        });

      scatterCells.exit().remove();

      function plot(p) {
        var scatterX = d3.scale.linear().range([0, cellsize]);
        var scatterY = d3.scale.linear().range([cellsize, 0]);
        var plotG = d3.select(this);

        scatterX.domain(d3.extent(p.values, function (d) { return d.x }));
        scatterY.domain(d3.extent(p.values, function (d) { return d.y }));

        var points = plotG.selectAll("circle")
          .data(p.values)

        points
          .enter().append("circle")

        points
            .attr("cx", function (d) {
              return scatterX(d.x);
            })
            .attr("cy", function (d) {
              return scatterY(d.y);
            })
            .attr("r", 3);

        points.exit().remove();
      }
    }

  });

}).call(this);
